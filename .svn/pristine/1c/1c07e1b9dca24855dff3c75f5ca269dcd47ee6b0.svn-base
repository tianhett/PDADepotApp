using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using HomotorDepotMgr.Utility;
using System.Data.SQLite;

namespace HomotorDepotMgr
{
    public partial class CaseMgr : Form
    {
        Hook hkCaseMgr = new Hook("hkCaseMgr");
        SQLiteDBHelper db = new SQLiteDBHelper();
        MsgDialog msg = new MsgDialog();
        int queue = 0; //操作个数标志，用来解决按一次键钩子触发多次的问题
        int keyCounter = 0; //解决在当前窗口按Enter键触发两次钩子的问题
        bool popUpOK = false; //弹出窗口点击确定的返回标志
        bool popUpCancel = false; //弹出窗口点击取消的返回标志
        Timer caseMgrTimer = new Timer();
        int sec = 100;
        int timeCounter = 5;

        public CaseMgr(int type)
        {
            InitializeComponent();
            if (type == 1)
            {
                ReloadCaseData();
            }
            hkCaseMgr.KeyHandlerDelegate += new Hook.KeyHandler(hkCaseMgr_KeyHandlerDelegate);
            hkCaseMgr.Start();
        }

        int hkCaseMgr_KeyHandlerDelegate(int vkCode, string clsName)
        {
            int result = 0;
            if (clsName.Equals("hkCaseMgr"))
            {
                switch (vkCode)
                {
                    case VirtualKey.VK_F1:
                        CaseAddHandler();
                        result = -1;
                        break;
                    case VirtualKey.VK_BACK:
                        CaseDelHandler();
                        result = -1;
                        break;
                    case VirtualKey.VK_0:
                        KeyPressHandler("0");
                        result = -1;
                        break;
                    case VirtualKey.VK_1:
                        KeyPressHandler("1");
                        result = -1;
                        break;
                    case VirtualKey.VK_2:
                        KeyPressHandler("2");
                        result = -1;
                        break;
                    case VirtualKey.VK_3:
                        KeyPressHandler("3");
                        result = -1;
                        break;
                    case VirtualKey.VK_4:
                        KeyPressHandler("4");
                        result = -1;
                        break;
                    case VirtualKey.VK_5:
                        KeyPressHandler("5");
                        result = -1;
                        break;
                    case VirtualKey.VK_6:
                        KeyPressHandler("6");
                        result = -1;
                        break;
                    case VirtualKey.VK_7:
                        KeyPressHandler("7");
                        result = -1;
                        break;
                    case VirtualKey.VK_8:
                        KeyPressHandler("8");
                        result = -1;
                        break;
                    case VirtualKey.VK_9:
                        KeyPressHandler("9");
                        result = -1;
                        break;
                    case VirtualKey.VK_ESCAPE:
                        keyCounter++;
                        if (popUpCancel)
                        {
                            popUpCancel = false;
                            keyCounter = 0;
                        }
                        else
                        {
                            if (keyCounter == 2)
                            {
                                queue = 0;
                                keyCounter = 0;
                                hkCaseMgr.Stop();
                                this.Close();
                            }
                        }
                        result = -1;
                        break;
                    case VirtualKey.VK_ENTER:
                         keyCounter++;
                         if (popUpOK)
                        {
                            popUpOK = false;
                            keyCounter = 0;
                            timeCounter = 5;
                        }
                        else
                        {
                            if (keyCounter == 2)
                            {
                                StartCaseMgrTimer(sec);
                            }
                        }
                        result = -1;
                        break;
                }
            }
            return result;
        }

        #region 按下数字键，弹出箱号搜索框
        public void KeyPressHandler(string keyStr)
        {
            if (!string.IsNullOrEmpty(keyStr) && queue == 0)
            {
                hkCaseMgr.Stop();
                queue = 1;
                CaseMgrSearch searchFrm = new CaseMgrSearch(keyStr);
                searchFrm.GetConfirmSearchDelegate += new CaseMgrSearch.GetConfirmSearch(searchFrm_GetConfirmSearchDelegate);
                searchFrm.Show();
            }
        }

        void searchFrm_GetConfirmSearchDelegate(int selection, int num)
        {
            if (selection == 1)
            {
                DataTable dt = (DataTable)dgCaseList.DataSource;
                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i].ItemArray[0].ToString().Equals(num.ToString()))
                        {
                            dgCaseList.UnSelect(dgCaseList.CurrentRowIndex);
                            dgCaseList.CurrentRowIndex = i;
                            dgCaseList.Select(i);
                            break;
                        }
                    }
                }
                popUpOK = true;
            }
            else
            {
                popUpCancel = true;
            }
            queue = 0;
            hkCaseMgr.Start();
        }
        #endregion

        #region 进入该箱号里面查看配件
        public void ViewCaseNumberDetail()
        {
            if (queue == 0)
            {
                hkCaseMgr.Stop();
                queue = 1;
                DataTable dt = (DataTable)dgCaseList.DataSource;
                string caseNumber = dt.Rows[dgCaseList.CurrentRowIndex].ItemArray[0].ToString();
                CaseDetailMgr detailFrm = new CaseDetailMgr(caseNumber);
                detailFrm.CaseDetailMgrWindowBackDegelate += new CaseDetailMgr.CaseDetailMgrWindowBack(detailFrm_CaseDetailMgrWindowBackDegelate);
                detailFrm.Show();
                //弹窗关闭返回来设置queue、hkCaseMgr，刷新列表
            }
        }

        void detailFrm_CaseDetailMgrWindowBackDegelate()
        {
            try
            {
                string sql = @"update CaseNumber set Total=(select sum(Num) from CaseNumberDetail where CaseNumber.ID=CaseNumberDetail.CaseNumberID)";
                db.ExecuteNonQuery(sql, null);
                ReloadCaseData();
            }
            catch (Exception ex)
            {
            }
            popUpCancel = false;
            queue = 0;
            hkCaseMgr.Start();
        }
        #endregion

        #region 修改箱号
        public void EditCaseNumber()
        {
            if (queue == 0)
            {
                hkCaseMgr.Stop();
                queue = 1;
                DataTable dt = (DataTable)dgCaseList.DataSource;
                string caseNumber = dt.Rows[dgCaseList.CurrentRowIndex].ItemArray[0].ToString();
                CaseMgrAdd frm = new CaseMgrAdd("修改箱号", 1, caseNumber);
                frm.GetCaseNumberDelegate += new CaseMgrAdd.GetCaseNumber(frm_GetCaseNumberDelegate);
                frm.Show();
            }
        }
        #endregion

        #region 定时器
        private void StartCaseMgrTimer(int ms)
        {
            caseMgrTimer.Interval = ms;
            caseMgrTimer.Tick += new EventHandler(CaseMgrTimer_Tick);
            caseMgrTimer.Enabled = true;
        }

        private void CaseMgrTimer_Tick(object sender, EventArgs e)
        {
            if (--timeCounter == 0)
            {
                if (keyCounter > 2)
                {
                    ViewCaseNumberDetail();
                    keyCounter = 0;
                    timeCounter = 5;
                }
                else if (keyCounter == 2)
                {
                    EditCaseNumber();
                    keyCounter = 0;
                    timeCounter = 5;
                }
                caseMgrTimer.Enabled = false;
            }
        }
        #endregion

        #region 新增修改箱子
        private void btnCaseAdd_Click(object sender, EventArgs e)
        {
            CaseAddHandler();
        }

        public void CaseAddHandler()
        {
            hkCaseMgr.Stop();
            CaseMgrAdd frm = new CaseMgrAdd("添加箱号", 0, "");
            frm.GetCaseNumberDelegate += new CaseMgrAdd.GetCaseNumber(frm_GetCaseNumberDelegate);
            frm.Show();
        }

        void frm_GetCaseNumberDelegate(int selection, int num, int type, string oldNumber)
        {
            if (selection == 1)
            {
                SQLiteParameter[] parameters = new SQLiteParameter[]{
                    new SQLiteParameter("@ID", Guid.NewGuid().ToString()),
                    new SQLiteParameter("@CaseNumber", num),
                    new SQLiteParameter("@FromID", TerminalInfo.GetDeviceID())
                };
                string sql = @"select * from CaseNumber where CaseNumber=@CaseNumber";
                try
                {
                    DataTable dt = db.ExecuteDataTable(sql, parameters);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        msg.ShowMessage(num + "号箱已存在", 1);
                    }
                    else
                    {
                        if (type == 0)
                        {
                            sql = @"insert into CaseNumber(ID,CaseNumber,FromID) values(@ID,@CaseNumber,@FromID)";
                        }
                        else if (type == 1)
                        {
                            sql = @"update CaseNumber set CaseNumber=@CaseNumber where CaseNumber=@oldCaseNumber";
                            parameters = new SQLiteParameter[]{
                            new SQLiteParameter("@CaseNumber", num),
                            new SQLiteParameter("@oldCaseNumber", oldNumber)
                        };
                        }
                        try
                        {
                            db.ExecuteNonQuery(sql, parameters);
                            ReloadCaseData();
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                }
                catch (Exception ex)
                {
                }
                popUpOK = true;
            }
            else
            {
                popUpCancel = true;
            }
            queue = 0;
            hkCaseMgr.Start();
        }
        #endregion

        #region 删除箱子
        private void btnCaseDel_Click(object sender, EventArgs e)
        {
            CaseDelHandler();
        }

        public void CaseDelHandler()
        {
            DataTable dt = (DataTable)dgCaseList.DataSource;
            if (dt != null && dt.Rows.Count > 0 && queue == 0)
            {
                hkCaseMgr.Stop();
                queue = 1;
                MsgBox msgBox = new MsgBox("是否确认要删除该箱号？", "警告", 3);
                msgBox.ConfirmSelectionDelegate += new MsgBox.ConfirmSelection(msgBox_ConfirmSelectionDelegate);
                msgBox.Show();
            }
        }

        void msgBox_ConfirmSelectionDelegate(int selection)
        {
            if (selection == 1)
            {
                try
                {
                    DataTable dt = (DataTable)dgCaseList.DataSource;
                    string caseNumber = dt.Rows[dgCaseList.CurrentRowIndex].ItemArray[0].ToString();
                    string sql = @"select * from CaseNumber where CaseNumber=@CaseNumber";
                    SQLiteParameter[] parameters = new SQLiteParameter[]{
                        new SQLiteParameter("@CaseNumber", caseNumber)
                    };
                    DataTable cndt = db.ExecuteDataTable(sql, parameters);
                    if (cndt != null && cndt.Rows.Count > 0)
                    {
                        //把箱子其下对应的配件明细也删除
                        sql = @"delete from CaseNumberDetail where CaseNumberID=@CaseNumberID";
                        parameters = new SQLiteParameter[]{
                            new SQLiteParameter("@CaseNumberID", cndt.Rows[0]["ID"].ToString())
                        };
                        db.ExecuteNonQuery(sql, parameters);
                        //把自己的箱子删除
                        sql = @"delete from CaseNumber where ID=@CaseNumberID";
                        db.ExecuteNonQuery(sql, parameters);
                        ReloadCaseData();
                    }
                }
                catch (Exception ex)
                {
                }
                popUpOK = true;
            }
            else
            {
                popUpCancel = true;
            }
            queue = 0;
            hkCaseMgr.Start();
        }
        #endregion

        public void ReloadCaseData()
        {
            string sql = @"select CaseNumber as 箱号,ifnull(Total,0) as 件数 from CaseNumber order by CaseNumber";
            try
            {
                DataTable dt = db.ExecuteDataTable(sql, null);
                dgCaseList.DataSource = dt;
                dgCaseList.RowHeadersVisible = false;
                if (dt != null && dt.Rows.Count > 0)
                {
                    dgCaseList.UnSelect(0);
                }
            }
            catch (Exception ex)
            {
            }
        }

    }
}