using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using HomotorDepotMgr.Utility;
using D300.System;
using SCAN.Scanner2D;
using System.Data.SQLite;
using Newtonsoft.Json;
using HomotorDepotMgr.Model;
using System.Threading;

namespace HomotorDepotMgr
{
    public partial class Main : Form
    {
        SQLiteDBHelper db = new SQLiteDBHelper();

        public Main()
        {
            InitializeComponent();
            lblDeviceID.Text = TerminalInfo.GetDeviceID();
        }

        private void Main_Activated(object sender, EventArgs e)
        {
            Scanner.Instance().OnScanedEvent += new Action<Scanner.CodeInfo>(scanner_OnScanedEvent);
            Scanner.Enable();//启用扫描
        }

        private void Main_Deactivate(object sender, EventArgs e)
        {
            Scanner.Instance().OnScanedEvent -= new Action<Scanner.CodeInfo>(scanner_OnScanedEvent);
            Scanner.Disable();//禁用扫描
        }

        void scanner_OnScanedEvent(Scanner.CodeInfo obj)
        {
            if (this.InvokeRequired)
            {
                Action<Scanner.CodeInfo> delegateFun = new Action<Scanner.CodeInfo>(scanner_OnScanedEvent);
                this.Invoke(delegateFun, obj);
            }
            else
            {
                CheckData(obj);
            }
        }

        public void CheckData(Scanner.CodeInfo obj)
        {
            string sql = @"select * from CaseNumber";
            try
            {
                DataTable dt = db.ExecuteDataTable(sql, null);
                if (dt != null && dt.Rows.Count > 0)
                {
                    DialogResult dgrs = MessageBox.Show("还有单据没有上传，是否要删除？", "警告", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1);
                    if (dgrs == DialogResult.OK)
                    {
                        ClearAllData();
                        DownloadDetailHandler(obj);
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        public void ClearAllData()
        {
            try
            {
                string sql = @"delete from CaseNumberDetail";
                db.ExecuteNonQuery(sql, null);
                sql = @"delete from CaseNumber";
                db.ExecuteNonQuery(sql, null);
            }
            catch (Exception ex)
            {
            }
        }

        public void DownloadDetailHandler(Scanner.CodeInfo obj)
        {
            #region 记录发货单条码
            string sql = @"delete from AppConfig where Key=@Key";
            SQLiteParameter[] parameters = new SQLiteParameter[]{
                new SQLiteParameter("@Key", "CaseBarcode"),
                new SQLiteParameter("@Value", obj.barcode)
             };
            try
            {
                db.ExecuteNonQuery(sql, parameters);
            }
            catch (Exception ex)
            {
            }
            sql = @"insert into AppConfig(Key,Value) values(@Key,@Value)";
            try
            {
                db.ExecuteNonQuery(sql, parameters);
            }
            catch (Exception ex)
            {
            }
            #endregion
            #region 上传条码，下载发货单明细
            string detailStrJson = DataUpDownload.DownloadInvoiceDetail(obj.barcode);
            FromERPJson model = JsonConvert.DeserializeObject<FromERPJson>(detailStrJson);
            if (model.IsSuccess)
            {
                MsgDialog msgDialog = new MsgDialog();
                msgDialog.ShowMessage("正在处理中，请稍后···", 1);
                sql = @"delete from FromERPDetail";
                try
                {
                    db.ExecuteNonQuery(sql, null);
                }
                catch (Exception ex)
                {
                }
                if (model.ReturnData.Count > 0)
                {
                    bool isSuccess = false;
                    sql = @"insert into FromERPDetail(InvoiceID,ProdID,Model,ProdName,Num,Barcode,BoxBarcode,NormNum) values (@InvoiceID,@ProdID,@Model,@ProdName,@Num,@Barcode,@BoxBarcode,@NormNum)";
                    foreach (FromERPDetailJson item in model.ReturnData)
                    {
                        parameters = new SQLiteParameter[]{
                             new SQLiteParameter("@InvoiceID", item.InvoiceID),
                             new SQLiteParameter("@ProdID", item.ProdID),
                             new SQLiteParameter("@Model", item.Model),
                             new SQLiteParameter("@ProdName", item.ProdName),
                             new SQLiteParameter("@Num", item.Num),
                             new SQLiteParameter("@Barcode", item.Barcode),
                             new SQLiteParameter("@BoxBarcode", item.BoxBarcode),
                            new SQLiteParameter("@NormNum", item.NormNum)
                         };
                        try
                        {
                            db.ExecuteNonQuery(sql, parameters);
                            isSuccess = true;
                        }
                        catch (Exception ex)
                        {
                            isSuccess = false;
                            break;
                        }
                    }
                    if (isSuccess)
                    {
                        CaseMgr caseMgrFrm = new CaseMgr(0);
                        caseMgrFrm.Show();
                    }
                }
            }
            #endregion
        }

        private void btnDownloadDetail_Click(object sender, EventArgs e)
        {
            Scanner.Instance().OnScanedEvent += new Action<Scanner.CodeInfo>(scanner_OnScanedEvent);
            Scanner.Enable();//启用扫描功能
            Scanner.IsContinue = false;
            Scanner.Instance().ScanReader();//调用扫描
        }

        private void btnUpload_Click(object sender, EventArgs e)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                string sql = @"select Value from AppConfig where Key=@Key";
                SQLiteParameter[] parameters = new SQLiteParameter[]{
                    new SQLiteParameter("@Key", "CaseBarcode")
                 };
                DataTable dt = db.ExecuteDataTable(sql, parameters);
                if (dt != null && dt.Rows.Count > 0)
                {
                    sql = @"select ID,CaseNumber,FromID from CaseNumber";
                    DataTable caseDt = db.ExecuteDataTable(sql, null);
                    if (caseDt != null && caseDt.Rows.Count > 0)
                    {
                        sql = @"select ID,CaseNumberID,ProdID,Num from CaseNumberDetail";
                        DataTable caseDetailDt = db.ExecuteDataTable(sql, null);
                        if (caseDetailDt != null && caseDetailDt.Rows.Count > 0)
                        {
                            CaseData data = new CaseData();
                            data.InvoiceBarcode = dt.Rows[0].ItemArray[0].ToString();
                            List<CaseNumberEntity> caseList = new List<CaseNumberEntity>();
                            data.InvoiceCase = caseList;
                            foreach (DataRow caseDr in caseDt.Rows)
                            {
                                CaseNumberEntity caseItem = new CaseNumberEntity();
                                caseItem.ID = caseDr[0].ToString();
                                caseItem.CaseNumber = caseDr[1].ToString();
                                caseItem.FromID = caseDr[2].ToString();
                                List<CaseNumberDetail> detailList = new List<CaseNumberDetail>();
                                caseItem.InvoiceCaseDetail = detailList;
                                DataRow[] detailArray = caseDetailDt.Select("CaseNumberID='" + caseDr[0].ToString() + "'");
                                if (detailArray.Length > 0)
                                {
                                    foreach (DataRow detailDr in detailArray)
                                    {
                                        CaseNumberDetail detailItem = new CaseNumberDetail();
                                        detailItem.ID = detailDr[0].ToString();
                                        detailItem.CaseNumberID = detailDr[1].ToString();
                                        detailItem.ProdID = detailDr[2].ToString();
                                        detailItem.Num = detailDr[3].ToString();
                                        detailList.Add(detailItem);
                                    }
                                }
                                caseList.Add(caseItem);
                            }
                            string jsonStrData = JsonConvert.SerializeObject(data);
                            if (!string.IsNullOrEmpty(jsonStrData))
                            {
                                //上传数据
                                string returnJson = DataUpDownload.UploadInvoiceDetail(jsonStrData);
                                if (!string.IsNullOrEmpty(returnJson))
                                {
                                    ResultModel resModel = JsonConvert.DeserializeObject<ResultModel>(returnJson);
                                    if (resModel != null && resModel.IsSuccess)
                                    {
                                        //删除数据
                                        //ClearDataBase();
                                    }
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("上传失败");
                        }
                    }
                    else
                    {
                        MessageBox.Show("上传失败");
                    }
                }
                else
                {
                    MessageBox.Show("上传失败");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("上传失败");
            }
        }

        public void ClearDataBase()
        {
            try
            {
                string sql = @"delete from CaseNumberDetail";
                db.ExecuteNonQuery(sql, null);
                sql = @"delete from CaseNumber";
                db.ExecuteNonQuery(sql, null);
                sql = @"delete from AppConfig where Key=@Key";
                SQLiteParameter[] parameters = new SQLiteParameter[]{
                    new SQLiteParameter("@Key", "CaseBarcode")
                 };
                db.ExecuteNonQuery(sql, parameters);
                sql = @"delete from FromERPDetail";
                db.ExecuteNonQuery(sql, null);
            }
            catch (Exception ex)
            {
            }
        }

        private void btnOpen_Click(object sender, EventArgs e)
        {
            CaseMgr caseMgrFrm = new CaseMgr(1);
            caseMgrFrm.Show();
        }

        private void btnSettings_Click(object sender, EventArgs e)
        {
            Settings settingFrm = new Settings();
            settingFrm.GetCaseSettingsDelegate += new Settings.GetCaseSettings(settingFrm_GetCaseSettingsDelegate);
            settingFrm.Show();
        }

        void settingFrm_GetCaseSettingsDelegate(int selection, SettingModel setting)
        {
            if (selection == 1)
            {
                try
                {
                    string sql = @"select * from AppConfig where Key=@Key";
                    SQLiteParameter[] parameters = new SQLiteParameter[]{
                        new SQLiteParameter("@Key", "IP"),
                        new SQLiteParameter("@Value", setting.IP)
                     };
                    DataTable dt = db.ExecuteDataTable(sql, parameters);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        sql = @"update AppConfig set Value=@Value where Key=@Key";
                        db.ExecuteNonQuery(sql, parameters);
                    }
                    else
                    {
                        sql = @"insert into AppConfig(Key,Value) values(@Key,@Value)";
                        db.ExecuteNonQuery(sql, parameters);
                    }
                    parameters = new SQLiteParameter[]{
                        new SQLiteParameter("@Key", "Port"),
                        new SQLiteParameter("@Value", setting.Port)
                     };
                    dt = db.ExecuteDataTable(sql, parameters);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        sql = @"update AppConfig set Value=@Value where Key=@Key";
                        db.ExecuteNonQuery(sql, parameters);
                    }
                    else
                    {
                        sql = @"insert into AppConfig(Key,Value) values(@Key,@Value)";
                        db.ExecuteNonQuery(sql, parameters);
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

    }
}